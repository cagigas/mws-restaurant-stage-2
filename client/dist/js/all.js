"use strict";var _createClass=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var DBHelper=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"fetchRestaurants",value:function(n){var t=new XMLHttpRequest;t.open("GET",e.DATABASE_URL),t.onload=function(){if(200===t.status){var e=JSON.parse(t.responseText).restaurants;n(null,e)}else{var r="Request failed. Returned status of "+t.status;n(r,null)}},t.send()}},{key:"fetchRestaurantById",value:function(n,t){e.fetchRestaurants(function(e,r){if(e)t(e,null);else{var a=r.find(function(e){return e.id==n});a?t(null,a):t("Restaurant does not exist",null)}})}},{key:"fetchRestaurantByCuisine",value:function(n,t){e.fetchRestaurants(function(e,r){if(e)t(e,null);else{var a=r.filter(function(e){return e.cuisine_type==n});t(null,a)}})}},{key:"fetchRestaurantByNeighborhood",value:function(n,t){e.fetchRestaurants(function(e,r){if(e)t(e,null);else{var a=r.filter(function(e){return e.neighborhood==n});t(null,a)}})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(n,t,r){e.fetchRestaurants(function(e,a){if(e)r(e,null);else{var o=a;"all"!=n&&(o=o.filter(function(e){return e.cuisine_type==n})),"all"!=t&&(o=o.filter(function(e){return e.neighborhood==t})),r(null,o)}})}},{key:"fetchNeighborhoods",value:function(n){e.fetchRestaurants(function(e,t){if(e)n(e,null);else{var r=t.map(function(e,n){return t[n].neighborhood}),a=r.filter(function(e,n){return r.indexOf(e)==n});n(null,a)}})}},{key:"fetchCuisines",value:function(n){e.fetchRestaurants(function(e,t){if(e)n(e,null);else{var r=t.map(function(e,n){return t[n].cuisine_type}),a=r.filter(function(e,n){return r.indexOf(e)==n});n(null,a)}})}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id="+e.id}},{key:"imageUrlForRestaurant",value:function(e){return"/img/"+e.photograph}},{key:"mapMarkerForRestaurant",value:function(n,t){return new google.maps.Marker({position:n.latlng,title:n.name,url:e.urlForRestaurant(n),map:t,animation:google.maps.Animation.DROP})}},{key:"DATABASE_URL",get:function(){return"http://localhost:3000/data/restaurants.json"}}]),e}();registerServiceWorker=function(){navigator.serviceWorker&&navigator.serviceWorker.register("/sw.js").then(function(){navigator.serviceWorker.controller&&console.log("Registration Worked!")}).catch(function(){console.error("Registration failed!")})},registerServiceWorker();var restaurants=void 0,neighborhoods=void 0,cuisines=void 0,markers=[];document.addEventListener("DOMContentLoaded",function(e){fetchNeighborhoods(),fetchCuisines()}),fetchNeighborhoods=function(){DBHelper.fetchNeighborhoods(function(e,n){e?console.error(e):(self.neighborhoods=n,fillNeighborhoodsHTML())})},fillNeighborhoodsHTML=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.neighborhoods,n=document.getElementById("neighborhoods-select");e.forEach(function(e){var t=document.createElement("option");t.innerHTML=e,t.value=e,n.append(t)})},fetchCuisines=function(){DBHelper.fetchCuisines(function(e,n){e?console.error(e):(self.cuisines=n,fillCuisinesHTML())})},fillCuisinesHTML=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.cuisines,n=document.getElementById("cuisines-select");e.forEach(function(e){var t=document.createElement("option");t.innerHTML=e,t.value=e,n.append(t)})},window.initMap=function(){self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants()},updateRestaurants=function(){var e=document.getElementById("cuisines-select"),n=document.getElementById("neighborhoods-select"),t=e.selectedIndex,r=n.selectedIndex,a=e[t].value,o=n[r].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(a,o,function(e,n){e?console.error(e):(resetRestaurants(n),fillRestaurantsHTML())})},resetRestaurants=function(e){self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(function(e){return e.setMap(null)}),self.markers=[],self.restaurants=e},fillRestaurantsHTML=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.restaurants,n=document.getElementById("restaurants-list");e.forEach(function(e){n.append(createRestaurantHTML(e))}),addMarkersToMap()},createRestaurantHTML=function(e){var n=document.createElement("li"),t=document.createElement("img");t.className="restaurant-img",t.alt=e.name+" restaurant's cover photo",t.src=DBHelper.imageUrlForRestaurant(e),n.append(t);var r=document.createElement("h2");r.innerHTML=e.name,n.append(r);var a=document.createElement("p");a.innerHTML=e.neighborhood,n.append(a);var o=document.createElement("p");o.innerHTML=e.address,n.append(o);var i=document.createElement("a");return i.innerHTML="View Details",i.href=DBHelper.urlForRestaurant(e),n.append(i),n},addMarkersToMap=function(){(arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.restaurants).forEach(function(e){var n=DBHelper.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(n,"click",function(){window.location.href=n.url}),self.markers.push(n)})};var map,restaurant=void 0;window.initMap=function(){fetchRestaurantFromURL(function(e,n){e?console.error(e):(self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:n.latlng,scrollwheel:!1}),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.map))})},fetchRestaurantFromURL=function(e){if(self.restaurant)e(null,self.restaurant);else{var n=getParameterByName("id");n?DBHelper.fetchRestaurantById(n,function(n,t){self.restaurant=t,t?(fillRestaurantHTML(),e(null,t)):console.error(n)}):(error="No restaurant id in URL",e(error,null))}},fillRestaurantHTML=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.restaurant;document.getElementById("restaurant-name").innerHTML=e.name,document.getElementById("restaurant-address").innerHTML=e.address;var n=document.getElementById("restaurant-img");n.className="restaurant-img",n.alt=e.name+" restaurant's cover photo",n.src=DBHelper.imageUrlForRestaurant(e),document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&fillRestaurantHoursHTML(),fillReviewsHTML()},fillRestaurantHoursHTML=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.restaurant.operating_hours,n=document.getElementById("restaurant-hours");for(var t in e){var r=document.createElement("tr"),a=document.createElement("td");a.innerHTML=t,r.appendChild(a);var o=document.createElement("td");o.innerHTML=e[t],r.appendChild(o),n.appendChild(r)}},fillReviewsHTML=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.restaurant.reviews,n=document.getElementById("reviews-container"),t=document.createElement("h2");if(t.innerHTML="Reviews",n.appendChild(t),!e){var r=document.createElement("p");return r.innerHTML="No reviews yet!",void n.appendChild(r)}var a=document.getElementById("reviews-list");e.forEach(function(e){a.appendChild(createReviewHTML(e))}),n.appendChild(a)},createReviewHTML=function(e){var n=document.createElement("li"),t=document.createElement("p");t.innerHTML=e.name;var r=document.createElement("p");r.innerHTML=e.date,r.id="restaurant-date";var a=document.createElement("ul");a.id="restaurant-basic-nav",a.appendChild(t),a.appendChild(r),n.appendChild(a);var o=document.createElement("p");o.innerHTML="Rating: "+e.rating,o.id="restaurant-rating",n.appendChild(o);var i=document.createElement("p");return i.innerHTML=e.comments,i.id="restaurant-comment",n.appendChild(i),n.tabIndex="0",n},fillBreadcrumb=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.restaurant,n=document.getElementById("breadcrumb"),t=document.createElement("li");t.innerHTML=e.name,n.appendChild(t)},getParameterByName=function(e,n){n||(n=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");var t=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(n);return t?t[2]?decodeURIComponent(t[2].replace(/\+/g," ")):"":null};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
